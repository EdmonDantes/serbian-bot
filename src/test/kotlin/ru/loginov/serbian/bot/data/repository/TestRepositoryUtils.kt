package ru.loginov.serbian.bot.data.repository

import org.junit.jupiter.api.Assertions
import javax.persistence.EmbeddedId
import javax.persistence.GeneratedValue
import javax.persistence.Id
import kotlin.reflect.KMutableProperty1
import kotlin.reflect.full.memberProperties
import kotlin.reflect.jvm.javaField

inline fun <O : Any, I : Any?, R : Any> R.assertAfter(
        input: I,
        expected: O,
        throwIfNull: Boolean = true,
        ignoreProperties: List<String> = emptyList(),
        action: R.(I) -> O?
): O? {
    val autoGeneratedIdProperty = expected::class.memberProperties
            .find {
                !ignoreProperties.contains(it.name)
                        && it is KMutableProperty1<*, *>
                        && (it.annotations.any { it is Id || it is EmbeddedId }
                        || it.javaField?.annotations?.any { it is Id || it is EmbeddedId } ?: false)
                        && it.annotations.any { it is GeneratedValue }
            }
            ?.let { it as KMutableProperty1<O, *> }
    val trackedProperties = expected::class.memberProperties
            .filter {
                !ignoreProperties.contains(it.name)
                        && it is KMutableProperty1<*, *>
                        && it.annotations.none { it is GeneratedValue || it is Transient }
                        && (it.javaField?.annotations?.none { it is GeneratedValue || it is Transient } ?: true)
            }
            .map { it as KMutableProperty1<O, *> }

    val prevState = HashMap<String, Any?>()

    trackedProperties.forEach {
        prevState[it.name] = it.get(expected)
    }

    val actual = action(input)

    if (throwIfNull) {
        Assertions.assertNotNull(actual)

        if (autoGeneratedIdProperty != null) {
            Assertions.assertNotNull(autoGeneratedIdProperty.get(actual!!))
        }
    } else if (actual == null) {
        return null
    }

    trackedProperties.forEach {
        Assertions.assertEquals(
                prevState[it.name],
                it.get(actual!!),
                "Value of property with name ${it.name} is not equals expected value"
        )
    }

    return actual
}

inline fun <O : Any, I : Any?, R : Any> R.assertNotNullAfter(
        input: I,
        expected: O,
        ignoreProperties: List<String> = emptyList(),
        action: R.(I) -> O?
): O = assertAfter(input, expected, true, ignoreProperties, action) ?: error("Returned object is null")

inline fun <T : Any, R : Any> R.assertAfter(
        obj: T,
        throwIfNull: Boolean = true,
        ignoreProperties: List<String> = emptyList(),
        action: R.(T) -> T?
): T? = assertAfter(obj, obj, throwIfNull, ignoreProperties, action)

inline fun <T : Any, R : Any> R.assertNotNullAfter(
        obj: T,
        ignoreProperties: List<String> = emptyList(),
        action: R.(T) -> T?
): T = assertAfter(obj, obj, true, ignoreProperties, action) ?: error("Returned object is null")
